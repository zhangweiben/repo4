<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:191caa64-5627-4a1f-90af-0c179431b0fb -->
<metadata name="generateCRUDOperations" path="/shared/Common/_scripts/Generate/generateCRUDOperations" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>generateCRUDOperations:
	-- Data Virtualization Best Practices --

	This procedure is used for generating Read/Write CRUD operation procedures.  In this context, CRUD includes
	&quot;Create&quot;, &quot;Read&quot;, &quot;Retrieve Primary Key&quot;, &quot;Update&quot;, and &quot;Delete&quot;.  Those are the base operations.  In addition to those
	base operations, there is a coordinator which is a procedure used to coordinate the lower level CRUD procedures.  
	It is required that CRUD procedures be generated from views that do &quot;not&quot; contain any new or derived columns.  As such,
	the best practice for CRUD views will be to utilize the &quot;generatePhysicalViews()&quot; procedure to generate a layer of views
	that contain a one-to-one correspondence with the physical metadata views.   For purposes of consistency, it is suggested
	that the those views be generated into the CRUD folder so that they are co-located with the other CRUD procedures and 
	will be easier to maintain.

	According to the Best Practices, the following functional areas are required for performing CRUD.   
		(1) Coordinate Save Procedures	 - Type: Generated and Modifiable
											A template is generated for each view but is intended to be modified as needed.
											It only serves as a baseline to get started and reduce the effort involved in
											creating the coordinator (save) procedures.  It Coordinates the overall invocation 
											of one or more lower level CRUD procedures allowing the developer to invoke as many 
											as needed, in any order that is required.  It coordinates the transaction to the 
											single database source.  Provides the interface to be published externally as 
											a web service &quot;saveProcedure()&quot;.  Values may need to be modified according to your 
											data source.  It is also reccommended that if the service is published as a web service, 
											that an external web service testing facility is utilized such as SoapUI, JMeter or 
											some other testing facility.  Once generated, these procedures will not be overwritten.
			1.a Test harness			 - Type: Generated and Modifiable
											Provides the ability to test the service locally.   
											Values may need to be modified according to your data source.  
											Once generated, these procedures will not be overwritten.

		(2) Create Procedures			 - Type: Generated and NOT Modifiable
											The purpose of this procedure is to perform a create on the view.
			2.a Custom Create Procedures - Type: Generated and Modifiable
											The purpose of this procedure provides a place to apply custom logic on the data values
											that will be created/inserted.
			2.b Test harness			 - Type: Generated and Modifiable
											Provides the ability to test the service locally.  Values may need to be modified
											according to your data source.  Once generated, these procedures will not be overwritten.

		(3) READ Procedures				 - Type: Generated and NOT Modifiable
											The purpose of this procedure is to perform a read on the view by primary key.
			3.a Test harness			 - Type: Generated and Modifiable
											Provides the ability to test the service locally.  Values may need to be modified
											according to your data source.  Once generated, these procedures will not be overwritten.

		(4) Retrieve Primary Key		 - Type: Generated and NOT Modifiable
											The purpose of this procedure is to retrieve the primary key from a view, given
											either the PK or values that make up an alternate key for the view.
			4.a Test harness			 - Type: Generated and Modifiable
											Provides the ability to test the service locally.  Values may need to be modified
											according to your data source.  Once generated, these procedures will not be overwritten.

		(5) Update Procedures			 - Type: Generated and NOT Modifiable
											The purpose of this procedure is to perform an update on the view using the primary key.
			5.a Update Custom Procedures - Type: Generated and Modifiable
											The purpose of this procedure provides a place to apply custom logic on the data values
											that will be updated.
			5.b Test harness			 - Type: Generated and Modifiable
											Provides the ability to test the service locally.  Values may need to be modified
											according to your data source.  Once generated, these procedures will not be overwritten.

		(6) Delete Procedures			 - Type: Generated and NOT Modifiable
											The purpose of this procedure is to perform a delete on the view using the primary key.
			6.a Test harness			 - Type: Generated and Modifiable
											Provides the ability to test the service locally.  Values may need to be modified
											according to your data source.  Once generated, these procedures will not be overwritten.


	It should be noted that this procedure uses the &quot;Target&quot; folder in the ConfigureStartingFolders().
	
	This procedure is meant to be executed by a Data Architect within studio.

	Whether you have 10&apos;s, 100&apos;s or 1000&apos;s of relational tables that you want to map into a canonical
	format, this auto-generation utility will aid in the mapping of data abstraction layers either from
	other views or from physical data source tables. 

	-------
	Usage:
	-------
	1) Edit the /&lt;project-name&gt;/_scripts/ConfigureParams and ConfigureStartingFolders file to set up the processing
		startingFolderVector - 
			defines which data source folders to process, 
			where the views get generated, 
			and whether the sub-folders are derived from the source or defined absolutely

	2) Refresh Studio to see the Views that were generated
	----------
	Cautions:
	----------
	   CAUTION(1): Overlapping sourceFolderPath definitions will result in duplicated views being produced
		Take the 2 example source folder paths expressed below.  The 2nd one is a sub-directory of the first one.
		This will result in the same source folders being processed twice which generates the same mapping views
		but in different target folders.
		(1,&apos;CV&apos;,&apos;A&apos;,&apos;/shared/BestPractices/DataAbstractionSample/Business/Logical&apos;,null,&apos;/shared/BestPractices/DataAbstractionSample/Application/Views&apos;);
		(1,&apos;CV&apos;,&apos;A&apos;,&apos;/shared/BestPractices/DataAbstractionSample/Business/Logical/CISORADEMO&apos;,null,&apos;/shared/BestPractices/DataAbstractionSample/Application/Views/CISORADEMO&apos;);

	    CAUTION(2): Source Folder Path definitions are case sensitive and must match the actual source path that you
		want to introspect to create mapping views from.

	    CAUTION(3): Only relational sources are supported at this time.

	Input:
			-- 0           - print the output to the cursor.  The cursor is bound by Composite Studio &quot;Fetch Row Size&quot; and &quot;Cursor Fetch Limit&quot;
			--               The cursor stops producing output when it hits those limits.  The limits are configured in Composite Studio
			--                  AdministrationConfigurationStudioDataFetch Rows Size and Cursor Fetch Limit.  
			--                  Modify the Cursor Fetch Limit to an arbitrary number such as 500
			-- 1 (default) - do not print the cursor output to the cursor but redirect to the console window.  The aforementioned limits do not apply.
		generateViewsWrapper

			-- allows user to decide whether they want to overwrite an existing view or not.
			-- 0=&quot;FAIL_IF_EXISTS&quot;=do not overwrite the resource.  If the resource exists, raise an exception.
			-- 1=&quot;SKIP_IF_EXISTS&quot;=skip the resource if it exists and continue processing
			-- 2 (default)=&quot;OVERWRITE_IF_EXISTS&quot;=do overwrite the resource if it exists.
		overwrite

			-- flag indicating the mode in which to copy privileges.  Privileges are only copied from the parent when creating new resources including folders.
			-- null (default) - do not set any privileges at all
			-- 0 - set mode to &quot;OVERWRITE_APPEND&quot; - merges and does not update privileges for users or groups not mentioned.
			-- 1 - set the mode to &quot;SET_EXACTLY&quot; - makes privileges look exactly like those provided in the call.
		copyPrivilegeMode

			-- specifies how the source resource will be matched against the resource being interrogated
			--	0=fuzzy match - sourcePath + derivedFilterPath must simply be contained within resourcePath
			--	1 (default)=exact match - sourcePath + derivedFilterPath must match exactly in resourcePath
		exactMatch

			-- The list &quot;derivedFilterPath&quot; is a comma-separated list of resources and may be used with either generateToFolder (option 1) to groupId (option 2) 
			-- The path is derived by concatenating the partial filter path with the source path either from the sourceResource or of the designated layer type and groupId.
			-- The layerType and the groupId are used to filter the rows from the configureStartingFolders.  The source path is
			--    defined in configureStartingFolders per the layerType and groupId combination.
			--   e.g. layerType=CP and sourceFolderPath=/shared/BestPractices/DataAbstractionAbstractionSample/Application/Views
			--        The derivedFilterPath list=&quot;Orders_Closed,/Orders/Customers,Orders/Product&quot;
			--        Even though there are several other views in the /Orders folder under the /Application/Views only the ones specified
			--	      will be generated to the Application/Published.  Views directly under the source path do not require any qualifying path except the view name.
			--        Lastly, a leading &apos;/&apos; is not required but may be present if desired.
			-- Correlate the groupId position with the derivedFilterPath position
			--		derivedFilterPath=&quot;customers,orders&quot;,shippingmethods
			--                         |                     |
			--                         v                     v
			--		          groupId=ds_inventory.tutorial,ds_orders.tutorial
			-- If null, generate views from all source folders as directed by the sourceResource or &quot;configure starting folders&quot; and the designated layer type.
		derivedFilterPath

			-- name of the type definition procedure.  e.g. TypeDefinitions
			- If null, then the default name &apos;TypeDefinitions&apos; is used.
		typeDefProcName

		-- OPTION 1 - generate views is controlled by explicit folder settings for a source resource and the folder to generate views to.
			-- 		  Use sourceResource and generateToFolder explicitly.   If blank then use layerType, groupIds and derivedFilterPath.
			-- The source folder in CIS to begin searching for views to generate CRUD procedures from
			-- If this is set it supercedes the parameters set for layerType, groupIds and derivedFilterPath
		sourceResource

			-- This is the full path to the folder in which to generate the views
			-- This is only required if option 1: sourceResource is provided.
		generateToFolder

		-- OPTION 2
 			-- If sourceResource is blank, then groupIds must be set with derivedFilterPath being optional
			-- The actual input are defined as local variables with DEFAULT values.  Adjust those variables accordingly.

			-- Layer type tells the generation script which starting folder (layer) to use to generate type definitions.
			-- PM=Physical Metadata - used by generateDasourceList
			-- CR=CRUD Target Folder Path - generateTypeDefinitions and generateCRUDOperations invokes generateViews
			-- PV=Physical Views - generatePhysicalViews invokes generateViews
			-- FV=Formatting Views - generateFormattingViews invokes generateViews
			-- BV=Business Views - generateBusinessViews invokes generateViews
			-- LV=Logical Views - generateLoicalViews invokes generateViews
			-- CV=Client Views - generateClientViews invokes generateViews
			-- CP=Client Published - generateClientPublished invokes generateViews
			-- DB=Database published link - generatePublishedResource invokes generateViews
		layerType

			-- This is a comma separate list group ids to process. 
			-- This is a filter that allows the user to only generate for a specific group or list of groups
			--   found in the /_scripts/Configure/ConfigureStartingFolders.
			--   Pass in null to select all groupIds.
		groupIds

	Output:
		success				BIT, 		- 1=success, 0=not successful
		result				CURSOR crudResponseType 	ROW(
			resourceName			VARCHAR(255),			-- name of the resource to generated CRUD operations for
			generated				CHAR(1),				-- Y or N - indicating whether the resource was skipped due to lack of primary keys
			success					BIT,					-- 1=success, 0=fail
			message					VARCHAR(1000)			-- status message
			)

	Exceptions:  none

	Modified Date:	Modified By:		CSW Version:	Reason:
	11/11/2010		Mike Tinius			5.1.0			Created new
	04/15/2013		Mike Tinius			5.2.0			Updated for Best Practices 7.0
	05/02/2013		Mike Tinius			5.2.0			Updated for Best Practices 7.1 - added overwrite, copyAnnotation, publishToFolder, targetResource
	07/31/2013		Mike Tinius			6.0.0			Updated for Best Practices 7.3 - moved console output to /shared/BestPractices_vXX/Procedures/generateViews
	08/08/2014		Mike Tinius			6.2.6			B.P. 8.1.3: Added check for dependency views in target path.  Don&apos;t generate when 0 or 1.  Changed default overwrite=1 instead of 2.
	08/08/2014		Mike Tinius			6.2.5			B.P. 8.1.3: Modified ability generate cast statements under various conditions when generateMode=G or R and generateCast=0-5.
			Added generateCast=2,3,4,5 allowing for &quot;NO&quot; CAST around index columns and adding a CAST display column for index columns.
			--	0=Do not generate CAST statement.  Pass through column as is.  Default behavior.
			-- 	1=Generate the CAST statement around the column
			--	2-Generate the CAST statement around the non-index columns only (No CAST on index columns)
			--	3-Generate the CAST statement around the non-index columns only and generate a &quot;display&quot; column for each index column.  (No CAST o nindex columns)
			--	4-Generate the CAST statement around the non-index columns and non-primary key index columns only (No CAST on primary key index columns)
			--	5-Generate the CAST statement around the non-index columns and non-primary key index columns only and generate a &quot;display&quot; column for each primary key index column.  (No CAST on primary key index columns)
	01/24/2019		Mike Tinius			8.0.0			B.P. 2019.1: Added the ability to handle columnCaseRule, resourcePrefix, resourceSuffix and newColumnList for generateMode=&apos;G&apos;. 
	01/29/2019		Mike Tinius			8.0.0			B.P. 2019.101: Fix bug so derivedFilterPath could be used with generateToFolder.
	03/14/2019		Mike Tinius			7.0.8			B.P. 2019.102: Added scriptsPath for flexibility of the location of the _scripts folder.
	06/12/2019		Mike Tinius			7.0.8			B.P. 2019.200: Modified to use XML based procedures in order to eliminate vector usage.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.</annotation>
  <parameters>
    <parameter name="generateViewsWrapper" direction="IN" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
    <parameter name="overwrite" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="copyPrivilegeMode" direction="IN" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
    <parameter name="exactMatch" direction="IN" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
    <parameter name="derivedFilterPath" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="typeDefProcName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="sourceResource" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="generateToFolder" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="layerType" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="groupIds" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="result" type="TABLE" refId="1">
        <element name="datasourceName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="projectFolderName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="greatGrandParentName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="grandParentName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="parentName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="containerName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="containerType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="name">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="logicalName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="logicalType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="logicalStatus">
          <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
        </element>
        <element name="containerPath">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
        <element name="duration">
          <datatype name="IntervalDay" type="INTERVAL_DAY" intervalMode="INTERVAL_HOUR_TO_SECOND" intervalPrecision="2" fractionalSecondPrecision="6"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/util/SetEnvironment" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="variableName" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyName" type="STRING" maxLength="255"/>
      </element>
      <element name="value" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyValue" type="STRING" maxLength="4096"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/generateViewsXML" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="ConfigParamsXML" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="layerType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="groupId" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="derivedFilterPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="datasourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="projectFolderName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="greatGrandParentName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="grandParentName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="parentName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="containerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="containerType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="columnName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="logicalColumnName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="logicalColumnType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="logicalStatus">
            <datatype type="STRING" maxLength="4000"/>
          </element>
          <element name="containerPath">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="duration">
            <datatype type="INTERVAL_DAY" intervalMode="INTERVAL_HOUR_TO_SECOND" intervalPrecision="2" fractionalSecondPrecision="6"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/getConfigureParamsXML" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="basePath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="generateMode" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="outputMode" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="generateViews" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="resourceCaseRule" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="columnCaseRule" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="useAliasRule" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="resourcePrefix" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceSuffix" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="generateWithSourceColumn" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="generateCast" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="generateIndexes" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="ConfigParamsXML" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Common/_scripts/Constants/defaultValues" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="bestPracticesVersion_" direction="OUT">
        <datatype type="FLOAT" minValue="2.2250738585072014E-308" maxValue="1.7976931348623157E308"/>
      </element>
      <element name="basePath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="scriptsPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="configureScriptsPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="constantsScriptsPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="generationScriptsPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="documentationScriptsPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="compositeDatabasePath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="applicationPublishedPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="applicationServicesPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="applicationViewsPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="applicationViewsSubFolder_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="crudPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="typeDefinitionPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="typeDefinitionProcName_" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="businessBusinessPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="businessLogicalPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="physicalFormattingPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="physicalFormattingTransformationPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="physicalViewsPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="physicalMetadataPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="genUniqueIDPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="debugTime_" direction="OUT">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 
	generateCRUDOperations:
	-- Data Virtualization Best Practices --

	This procedure is used for generating Read/Write CRUD operation procedures.  In this context, CRUD includes
	&quot;Create&quot;, &quot;Read&quot;, &quot;Retrieve Primary Key&quot;, &quot;Update&quot;, and &quot;Delete&quot;.  Those are the base operations.  In addition to those
	base operations, there is a coordinator which is a procedure used to coordinate the lower level CRUD procedures.  
	It is required that CRUD procedures be generated from views that do &quot;not&quot; contain any new or derived columns.  As such,
	the best practice for CRUD views will be to utilize the &quot;generatePhysicalViews()&quot; procedure to generate a layer of views
	that contain a one-to-one correspondence with the physical metadata views.   For purposes of consistency, it is suggested
	that the those views be generated into the CRUD folder so that they are co-located with the other CRUD procedures and 
	will be easier to maintain.

	According to the Best Practices, the following functional areas are required for performing CRUD.   
		(1) Coordinate Save Procedures	 - Type: Generated and Modifiable
											A template is generated for each view but is intended to be modified as needed.
											It only serves as a baseline to get started and reduce the effort involved in
											creating the coordinator (save) procedures.  It Coordinates the overall invocation 
											of one or more lower level CRUD procedures allowing the developer to invoke as many 
											as needed, in any order that is required.  It coordinates the transaction to the 
											single database source.  Provides the interface to be published externally as 
											a web service &quot;saveProcedure()&quot;.  Values may need to be modified according to your 
											data source.  It is also reccommended that if the service is published as a web service, 
											that an external web service testing facility is utilized such as SoapUI, JMeter or 
											some other testing facility.  Once generated, these procedures will not be overwritten.
			1.a Test harness			 - Type: Generated and Modifiable
											Provides the ability to test the service locally.   
											Values may need to be modified according to your data source.  
											Once generated, these procedures will not be overwritten.

		(2) Create Procedures			 - Type: Generated and NOT Modifiable
											The purpose of this procedure is to perform a create on the view.
			2.a Custom Create Procedures - Type: Generated and Modifiable
											The purpose of this procedure provides a place to apply custom logic on the data values
											that will be created/inserted.
			2.b Test harness			 - Type: Generated and Modifiable
											Provides the ability to test the service locally.  Values may need to be modified
											according to your data source.  Once generated, these procedures will not be overwritten.

		(3) READ Procedures				 - Type: Generated and NOT Modifiable
											The purpose of this procedure is to perform a read on the view by primary key.
			3.a Test harness			 - Type: Generated and Modifiable
											Provides the ability to test the service locally.  Values may need to be modified
											according to your data source.  Once generated, these procedures will not be overwritten.

		(4) Retrieve Primary Key		 - Type: Generated and NOT Modifiable
											The purpose of this procedure is to retrieve the primary key from a view, given
											either the PK or values that make up an alternate key for the view.
			4.a Test harness			 - Type: Generated and Modifiable
											Provides the ability to test the service locally.  Values may need to be modified
											according to your data source.  Once generated, these procedures will not be overwritten.

		(5) Update Procedures			 - Type: Generated and NOT Modifiable
											The purpose of this procedure is to perform an update on the view using the primary key.
			5.a Update Custom Procedures - Type: Generated and Modifiable
											The purpose of this procedure provides a place to apply custom logic on the data values
											that will be updated.
			5.b Test harness			 - Type: Generated and Modifiable
											Provides the ability to test the service locally.  Values may need to be modified
											according to your data source.  Once generated, these procedures will not be overwritten.

		(6) Delete Procedures			 - Type: Generated and NOT Modifiable
											The purpose of this procedure is to perform a delete on the view using the primary key.
			6.a Test harness			 - Type: Generated and Modifiable
											Provides the ability to test the service locally.  Values may need to be modified
											according to your data source.  Once generated, these procedures will not be overwritten.


	It should be noted that this procedure uses the &quot;Target&quot; folder in the ConfigureStartingFolders().
	
	This procedure is meant to be executed by a Data Architect within studio.

	Whether you have 10&apos;s, 100&apos;s or 1000&apos;s of relational tables that you want to map into a canonical
	format, this auto-generation utility will aid in the mapping of data abstraction layers either from
	other views or from physical data source tables. 

	-------
	Usage:
	-------
	1) Edit the /&lt;project-name&gt;/_scripts/ConfigureParams and ConfigureStartingFolders file to set up the processing
		startingFolderVector - 
			defines which data source folders to process, 
			where the views get generated, 
			and whether the sub-folders are derived from the source or defined absolutely

	2) Refresh Studio to see the Views that were generated
	----------
	Cautions:
	----------
	   CAUTION(1): Overlapping sourceFolderPath definitions will result in duplicated views being produced
		Take the 2 example source folder paths expressed below.  The 2nd one is a sub-directory of the first one.
		This will result in the same source folders being processed twice which generates the same mapping views
		but in different target folders.
		(1,&apos;CV&apos;,&apos;A&apos;,&apos;/shared/BestPractices/DataAbstractionSample/Business/Logical&apos;,null,&apos;/shared/BestPractices/DataAbstractionSample/Application/Views&apos;);
		(1,&apos;CV&apos;,&apos;A&apos;,&apos;/shared/BestPractices/DataAbstractionSample/Business/Logical/CISORADEMO&apos;,null,&apos;/shared/BestPractices/DataAbstractionSample/Application/Views/CISORADEMO&apos;);

	    CAUTION(2): Source Folder Path definitions are case sensitive and must match the actual source path that you
		want to introspect to create mapping views from.

	    CAUTION(3): Only relational sources are supported at this time.

	Input:
			-- 0           - print the output to the cursor.  The cursor is bound by Composite Studio &quot;Fetch Row Size&quot; and &quot;Cursor Fetch Limit&quot;
			--               The cursor stops producing output when it hits those limits.  The limits are configured in Composite Studio
			--                  AdministrationConfigurationStudioDataFetch Rows Size and Cursor Fetch Limit.  
			--                  Modify the Cursor Fetch Limit to an arbitrary number such as 500
			-- 1 (default) - do not print the cursor output to the cursor but redirect to the console window.  The aforementioned limits do not apply.
		generateViewsWrapper

			-- allows user to decide whether they want to overwrite an existing view or not.
			-- 0=&quot;FAIL_IF_EXISTS&quot;=do not overwrite the resource.  If the resource exists, raise an exception.
			-- 1=&quot;SKIP_IF_EXISTS&quot;=skip the resource if it exists and continue processing
			-- 2 (default)=&quot;OVERWRITE_IF_EXISTS&quot;=do overwrite the resource if it exists.
		overwrite

			-- flag indicating the mode in which to copy privileges.  Privileges are only copied from the parent when creating new resources including folders.
			-- null (default) - do not set any privileges at all
			-- 0 - set mode to &quot;OVERWRITE_APPEND&quot; - merges and does not update privileges for users or groups not mentioned.
			-- 1 - set the mode to &quot;SET_EXACTLY&quot; - makes privileges look exactly like those provided in the call.
		copyPrivilegeMode

			-- specifies how the source resource will be matched against the resource being interrogated
			--	0=fuzzy match - sourcePath + derivedFilterPath must simply be contained within resourcePath
			--	1 (default)=exact match - sourcePath + derivedFilterPath must match exactly in resourcePath
		exactMatch

			-- The list &quot;derivedFilterPath&quot; is a comma-separated list of resources and may be used with either generateToFolder (option 1) to groupId (option 2) 
			-- The path is derived by concatenating the partial filter path with the source path either from the sourceResource or of the designated layer type and groupId.
			-- The layerType and the groupId are used to filter the rows from the configureStartingFolders.  The source path is
			--    defined in configureStartingFolders per the layerType and groupId combination.
			--   e.g. layerType=CP and sourceFolderPath=/shared/BestPractices/DataAbstractionAbstractionSample/Application/Views
			--        The derivedFilterPath list=&quot;Orders_Closed,/Orders/Customers,Orders/Product&quot;
			--        Even though there are several other views in the /Orders folder under the /Application/Views only the ones specified
			--	      will be generated to the Application/Published.  Views directly under the source path do not require any qualifying path except the view name.
			--        Lastly, a leading &apos;/&apos; is not required but may be present if desired.
			-- Correlate the groupId position with the derivedFilterPath position
			--		derivedFilterPath=&quot;customers,orders&quot;,shippingmethods
			--                         |                     |
			--                         v                     v
			--		          groupId=ds_inventory.tutorial,ds_orders.tutorial
			-- If null, generate views from all source folders as directed by the sourceResource or &quot;configure starting folders&quot; and the designated layer type.
		derivedFilterPath

			-- name of the type definition procedure.  e.g. TypeDefinitions
			- If null, then the default name &apos;TypeDefinitions&apos; is used.
		typeDefProcName

		-- OPTION 1 - generate views is controlled by explicit folder settings for a source resource and the folder to generate views to.
			-- 		  Use sourceResource and generateToFolder explicitly.   If blank then use layerType, groupIds and derivedFilterPath.
			-- The source folder in CIS to begin searching for views to generate CRUD procedures from
			-- If this is set it supercedes the parameters set for layerType, groupIds and derivedFilterPath
		sourceResource

			-- This is the full path to the folder in which to generate the views
			-- This is only required if option 1: sourceResource is provided.
		generateToFolder

		-- OPTION 2
 			-- If sourceResource is blank, then groupIds must be set with derivedFilterPath being optional
			-- The actual input are defined as local variables with DEFAULT values.  Adjust those variables accordingly.

			-- Layer type tells the generation script which starting folder (layer) to use to generate type definitions.
			-- PM=Physical Metadata - used by generateDasourceList
			-- CR=CRUD Target Folder Path - generateTypeDefinitions and generateCRUDOperations invokes generateViews
			-- PV=Physical Views - generatePhysicalViews invokes generateViews
			-- FV=Formatting Views - generateFormattingViews invokes generateViews
			-- BV=Business Views - generateBusinessViews invokes generateViews
			-- LV=Logical Views - generateLoicalViews invokes generateViews
			-- CV=Client Views - generateClientViews invokes generateViews
			-- CP=Client Published - generateClientPublished invokes generateViews
			-- DB=Database published link - generatePublishedResource invokes generateViews
		layerType

			-- This is a comma separate list group ids to process. 
			-- This is a filter that allows the user to only generate for a specific group or list of groups
			--   found in the /_scripts/Configure/ConfigureStartingFolders.
			--   Pass in null to select all groupIds.
		groupIds

	Output:
		success				BIT, 		- 1=success, 0=not successful
		result				CURSOR crudResponseType 	ROW(
			resourceName			VARCHAR(255),			-- name of the resource to generated CRUD operations for
			generated				CHAR(1),				-- Y or N - indicating whether the resource was skipped due to lack of primary keys
			success					BIT,					-- 1=success, 0=fail
			message					VARCHAR(1000)			-- status message
			)

	Exceptions:  none

	Modified Date:	Modified By:		CSW Version:	Reason:
	11/11/2010		Mike Tinius			5.1.0			Created new
	04/15/2013		Mike Tinius			5.2.0			Updated for Best Practices 7.0
	05/02/2013		Mike Tinius			5.2.0			Updated for Best Practices 7.1 - added overwrite, copyAnnotation, publishToFolder, targetResource
	07/31/2013		Mike Tinius			6.0.0			Updated for Best Practices 7.3 - moved console output to /shared/BestPractices_vXX/Procedures/generateViews
	08/08/2014		Mike Tinius			6.2.6			B.P. 8.1.3: Added check for dependency views in target path.  Don&apos;t generate when 0 or 1.  Changed default overwrite=1 instead of 2.
	08/08/2014		Mike Tinius			6.2.5			B.P. 8.1.3: Modified ability generate cast statements under various conditions when generateMode=G or R and generateCast=0-5.
			Added generateCast=2,3,4,5 allowing for &quot;NO&quot; CAST around index columns and adding a CAST display column for index columns.
			--	0=Do not generate CAST statement.  Pass through column as is.  Default behavior.
			-- 	1=Generate the CAST statement around the column
			--	2-Generate the CAST statement around the non-index columns only (No CAST on index columns)
			--	3-Generate the CAST statement around the non-index columns only and generate a &quot;display&quot; column for each index column.  (No CAST o nindex columns)
			--	4-Generate the CAST statement around the non-index columns and non-primary key index columns only (No CAST on primary key index columns)
			--	5-Generate the CAST statement around the non-index columns and non-primary key index columns only and generate a &quot;display&quot; column for each primary key index column.  (No CAST on primary key index columns)
	01/24/2019		Mike Tinius			8.0.0			B.P. 2019.1: Added the ability to handle columnCaseRule, resourcePrefix, resourceSuffix and newColumnList for generateMode=&apos;G&apos;. 
	01/29/2019		Mike Tinius			8.0.0			B.P. 2019.101: Fix bug so derivedFilterPath could be used with generateToFolder.
	03/14/2019		Mike Tinius			7.0.8			B.P. 2019.102: Added scriptsPath for flexibility of the location of the _scripts folder.
	06/12/2019		Mike Tinius			7.0.8			B.P. 2019.200: Modified to use XML based procedures in order to eliminate vector usage.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE generateCRUDOperations(
		-- 0           - print the output to the cursor.  The cursor is bound by Composite Studio &quot;Fetch Row Size&quot; and &quot;Cursor Fetch Limit&quot;
		--               The cursor stops producing output when it hits those limits.  The limits are configured in Composite Studio
		--                  AdministrationConfigurationStudioDataFetch Rows Size and Cursor Fetch Limit.  
		--                  Modify the Cursor Fetch Limit to an arbitrary number such as 500
		-- 1 (default) - do not print the cursor output to the cursor but redirect to the console window.  The aforementioned limits do not apply.
	IN generateViewsWrapper		BIT,

		-- allows user to decide whether they want to overwrite an existing view or not.
		-- 0=&quot;FAIL_IF_EXISTS&quot;=do not overwrite the resource.  If the resource exists, raise an exception.
		-- 1=&quot;SKIP_IF_EXISTS&quot;=skip the resource if it exists and continue processing
		-- 2 (default)=&quot;OVERWRITE_IF_EXISTS&quot;=do overwrite the resource if it exists.
	IN overwrite				INTEGER,

		-- flag indicating the mode in which to copy privileges.  Privileges are only copied from the parent when creating new resources including folders.
		-- null (default) - do not set any privileges at all
		-- 0 - set mode to &quot;OVERWRITE_APPEND&quot; - merges and does not update privileges for users or groups not mentioned.
		-- 1 - set the mode to &quot;SET_EXACTLY&quot; - makes privileges look exactly like those provided in the call.
	IN copyPrivilegeMode		BIT,

		-- specifies how the source resource will be matched against the resource being interrogated
		-- 0=fuzzy match - sourcePath + derivedFilterPath must simply be contained within resourcePath
		-- 1 (default)=exact match - sourcePath + derivedFilterPath must match exactly in resourcePath
	IN exactMatch				BIT,

		-- The list &quot;derivedFilterPath&quot; is a comma-separated list of resources and may be used with either generateToFolder (option 1) to groupId (option 2) 
		-- The path is derived by concatenating the partial filter path with the source path either from the sourceResource or of the designated layer type and groupId.
		-- The layerType and the groupId are used to filter the rows from the configureStartingFolders.  The source path is
		--    defined in configureStartingFolders per the layerType and groupId combination.
		--   e.g. layerType=CP and sourceFolderPath=/shared/BestPractices/DataAbstractionAbstractionSample/Application/Views
		--        The derivedFilterPath list=&quot;Orders_Closed,/Orders/Customers,Orders/Product&quot;
		--        Even though there are several other views in the /Orders folder under the /Application/Views only the ones specified
		--	      will be generated to the Application/Published.  Views directly under the source path do not require any qualifying path except the view name.
		--        Lastly, a leading &apos;/&apos; is not required but may be present if desired.
		-- Correlate the groupId position with the derivedFilterPath position
		--		derivedFilterPath=&quot;customers,orders&quot;,shippingmethods
		--                         |                     |
		--                         v                     v
		--		          groupId=ds_inventory.tutorial,ds_orders.tutorial
		-- If null, generate views from all source folders as directed by the sourceResource or &quot;configure starting folders&quot; and the designated layer type.
	IN derivedFilterPath		LONGVARCHAR,

		-- name of the type definition procedure.  e.g. TypeDefinitions
		-- If null, then the default name &apos;TypeDefinitions&apos; is used.
	IN typeDefProcName			VARCHAR,

	
	-- OPTION 1 - generate views is controlled by explicit folder settings for a source resource and the folder to generate views to.
		-- 		  Use sourceResource and generateToFolder explicitly.   If blank then use layerType, groupIds and derivedFilterPath.
 		-- The source folder in CIS to begin searching for views to generate CRUD procedures from
		-- If this is set it supercedes the parameters set for layerType, groupIds and derivedFilterPath
	IN sourceResource			LONGVARCHAR,

		-- This is the full path to the folder in which to generate the views
		-- This is only required if option 1: sourceResource is provided.
	IN generateToFolder			LONGVARCHAR,

	-- OPTION 2 - generate views is controlled via layerType, groupIds and derivedFilter from the ConfigureStartingFolders
 		-- If sourceResource is blank, then groupIds must be set with derivedFilterPath being optional
		-- PM=Physical Metadata - used by generateDasourceList
		-- CR=CRUD Target Folder Path - generateTypeDefinitions and generateCRUDOperations invokes generateViews
		-- PV=Physical Views - generatePhysicalViews invokes generateViews
		-- FV=Formatting Views - generateFormattingViews invokes generateViews
		-- BV=Business Views - generateBusinessViews invokes generateViews
		-- LV=Logical Views - generateLoicalViews invokes generateViews
		-- CV=Client Views - generateClientViews invokes generateViews
		-- CP=Client Published - generateClientPublished invokes generateViews
		-- DB=Database published link - generatePublishedResource invokes generateViews
	IN layerType				VARCHAR,

		-- This is a comma separate list group ids to process. 
		-- This is a filter that allows the user to only generate for a specific group or list of groups
		--   found in the /_scripts/Configure/ConfigureStartingFolders.
		--   Pass in null to select all groupIds.
	IN groupIds					LONGVARCHAR,

    OUT result CURSOR 			/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.generateCRUDRow
)
BEGIN
-- ***********************************************************************************************************************
-- *  Default Profile for generating the &quot;Application/Services/CRUD&quot; layer from the &quot;Application/Services/Physical&quot; layer
-- ***********************************************************************************************************************
    	-- G=Generate the resource names 
		-- R=Retrieve the resource name from a spreadsheet. (resources include PATH names, VIEW names AND COLUMN names)
    DECLARE generateMode				CHAR(1) DEFAULT &apos;G&apos;;

    	-- A=Return All abstract columns, 
    	-- U=Return ONLY Unchanged/Dropped columns that were NOT found.
    DECLARE outputMode	 				CHAR(1) DEFAULT &apos;A&apos;;

 		-- 0=Do not generate - (browse only) print out what will happen but don&apos;t perform the generation.
		-- 1=Do generate [DEFAULT] - Perform the VIEW Generation with a column projection.
		-- 2=Do generate           - Perform the VIEW Generation with a select * projection.
    DECLARE generateViews				SMALLINT DEFAULT 1;

		--  TABLES only.  This resourceCaseRule is only used for tables.
		--	 Assumption:  The original table name has to have separators (_) for this to work properly.
		--			     If the original word has no separators then the case rule gets applied to the single word.
    	-- 	j=javaCase - 1st word part is lower case, following word parts are 1st is letter is upper and remaining word part is lower with no separators
		-- 	C=CamelCase - 1st letter of each word part is upper case and remaining word part is lower with no separators
		-- 	T=Title_Case - 1st letter of each word part is upper case and remaining word part is lower with separators retained
		-- 	U=UPPER_CASE - All word parts are UPPER case with separtors retained
		-- 	l=lower_case - All word parts are lower case with separators retained
		-- 	O=Original_case - The word is not changed at all -- just pass it through as is
	DECLARE resourceCaseRule			CHAR(1) DEFAULT &apos;O&apos;; -- (used when generateMode=&apos;G&apos;)

		--  COLUMNS only.  This columnCaseRule is only used for columns.
		--	 Assumption:  The original column name has to have separators (_) for this to work properly.
		--			     If the original word has no separators then the case rule gets applied to the single word.
		--	j=javaCase - 1st word part is lower case, following word parts are 1st is letter is upper and remaining word part is lower with no separators
		--	C=CamelCase - 1st letter of each word part is upper case and remaining word part is lower with no separators
		--	T=Title_Case - 1st letter of each word part is upper case and remaining word part is lower with separators retained
		--	U=UPPER_CASE - All word parts are UPPER case with separtors retained
		--	l=lower_case - All word parts are lower case with separators retained
		--	O=Original_case - The word is not changed at all -- just pass it through as is
	DECLARE columnCaseRule				CHAR(1) DEFAULT &apos;O&apos;; -- (used when generateMode=&apos;G&apos;)

    	-- 0=DO NOT perform alias rule lookup at all.  Word Part is passed through
		-- 1=Use alias rule and MATCH CASE exactly
		-- 2=Use alias rule and DO NOT MATCH CASE
	DECLARE useAliasRule				SMALLINT DEFAULT 0;	-- (used when generateMode=&apos;G&apos;)

		--  Any set of characters used to prefix a table or procedure name.  Include underscores with the suffix if applicable.
		--	Example: V_ MY_TABLE or V_MY_TABLE 	
	DECLARE resourcePrefix 				VARCHAR DEFAULT null; --(used when generateMode=&apos;G&apos;)

		--  Any set of characters used to suffix a table or procedure name.  Include underscores with the suffix if applicable.
		--	Example: _APP MY_TABLE or MY_TABLE_APP 	
	DECLARE resourceSuffix 				VARCHAR DEFAULT null; --(used when generateMode=&apos;G&apos;)

		-- A formatted list of new columns to add to the end of the view.  The column will not be added if it already exists.
		-- The format is as follows:  column1&amp;&amp;type1&amp;&amp;value1//column2&amp;&amp;type2&amp;&amp;value2//column3&amp;&amp;type3&amp;&amp;value3
	DECLARE newColumnList				LONGVARCHAR DEFAULT null; --(used when generateMode=&apos;G&apos;)

		-- 0=Do NOT generate the view with the source column (no pass through)-logical status is DROPPED
    	-- 1=Generate the view with the source column (pass through)-logical status is UNCHANGED
    DECLARE generateWithSourceColumn 	SMALLINT DEFAULT NULL;-- (used when generateMode=&apos;R&apos;)

		-- 	This parameter allows the user to control whether to generate the cast statement around the generated
		--	   column or not.  It uses the column type from the source view.
		--	0=Do not generate CAST statement.  Pass through column as is.  Default behavior.
		-- 	1=Generate the CAST statement around the column
		--	2-Generate the CAST statement around the non-index columns only (No CAST on index columns)
		--	3-Generate the CAST statement around the non-index columns only and generate a &quot;display&quot; CAST column for each index column.  (No CAST o nindex columns)
		--	4-Generate the CAST statement around the non-index columns and non-primary key index columns only (No CAST on primary key index columns)
		--	5-Generate the CAST statement around the non-index columns and non-primary key index columns only and generate a &quot;display&quot; CAST column for each primary key index column.  (No CAST on primary key index columns)
	DECLARE generateCast 				SMALLINT DEFAULT 0;-- (used when generateMode=&apos;G&apos; or &apos;R&apos;)

		--	generateIndexes - This parameter allows the user to control whether to generate indexes on the target views as derived from the underlying resources
		--	0=Do not generate indexes
		-- 	1=(default) Generate indexes
	DECLARE generateIndexes 			SMALLINT DEFAULT 0;

		-- comma separated list of resource paths or partials paths to exclude.  This may be useful when a data source has been moved and it&apos;s index or foreign keys
		--	are pointing to another data source that does not exist anymore.  It may be necessary to exclude that path or paths.  If an exception is thrown during 
		--	execution, try excluding those paths.
		--	Values: /shared/MyPath/Physical/Metadata/MyDatasource
	DECLARE excludeDsPathsList			LONGVARCHAR DEFAULT null;

		-- flag indicating whether to ignore or generate unsupported column types.  For example in Oracle an SDO spatial type gets imported into Composite as &apos;OTHER&apos;.
		-- 0/null (default) - ignore column type = &apos;OTHER&apos; and do not generate that column
		-- 1 - generate columns where the column type = &apos;OTHER&apos;
	DECLARE generateUnsupportedColumnType INTEGER DEFAULT 0;

		-- Path to the base project directory.
    DECLARE basePath					VARCHAR(4000);

		-- Path to the scripts project directory.
	DECLARE scriptsPath					VARCHAR(4000);

    DECLARE ConfigParamsXML				LONGVARCHAR;
	DECLARE moduleName					VARCHAR DEFAULT &apos;generateCRUDOperations&apos;;
	DECLARE i							INTEGER DEFAULT 1;

	-----------------------------------------------------------------
	-- NOTE: Make sure the path is pointing to the correct project
	-----------------------------------------------------------------
	set basePath = /shared/Common/&quot;_scripts&quot;/Constants/defaultValues.basePath;
	set scriptsPath = /shared/Common/&quot;_scripts&quot;/Constants/defaultValues.scriptsPath;

	-- Set environment variables
	call /lib/util/SetEnvironment(&apos;best.practices.scriptsPath&apos;,scriptsPath);
	call /lib/util/SetEnvironment(&apos;best.practices.generateType&apos;,&apos;VIEW&apos;);
	call /lib/util/SetEnvironment(&apos;best.practices.generateViewsWrapper&apos;,CAST(generateViewsWrapper AS VARCHAR));
 	call /lib/util/SetEnvironment(&apos;best.practices.overwrite&apos;,CAST(overwrite AS VARCHAR));
	call /lib/util/SetEnvironment(&apos;best.practices.copyAnnotation&apos;,&apos;NULL&apos;);
	call /lib/util/SetEnvironment(&apos;best.practices.copyPrivilegeMode&apos;,CAST(copyPrivilegeMode AS VARCHAR));
	call /lib/util/SetEnvironment(&apos;best.practices.sourceResource&apos;,sourceResource);
  	call /lib/util/SetEnvironment(&apos;best.practices.generateToFolder&apos;,generateToFolder);
	call /lib/util/SetEnvironment(&apos;best.practices.exactMatch&apos;,CAST(exactMatch AS VARCHAR));
	call /lib/util/SetEnvironment(&apos;best.practices.executeModuleName&apos;,moduleName);
	call /lib/util/SetEnvironment(&apos;best.practices.typeDefinitionProcedureName&apos;,typeDefProcName);
	call /lib/util/SetEnvironment(&apos;best.practices.generateUnsupportedColumnType&apos;,CAST(generateUnsupportedColumnType AS VARCHAR));
 	call /lib/util/SetEnvironment(&apos;best.practices.excludeDsPathsList&apos;,excludeDsPathsList);
  	call /lib/util/SetEnvironment(&apos;best.practices.newColumnList&apos;,newColumnList);

    CALL /shared/ASAssets/BestPractices_v81/Procedures/getConfigureParamsXML(basePath, generateMode, outputMode, generateViews, resourceCaseRule, columnCaseRule, useAliasRule, resourcePrefix, resourceSuffix, generateWithSourceColumn, generateCast, generateIndexes, ConfigParamsXML);	    

	if (generateViewsWrapper is not null and generateViewsWrapper = 0) then
		-- Invoke sending results to &quot;RESULT CURSOR TAB&quot;
 		OPEN result FOR 
		    SELECT * FROM /shared/ASAssets/BestPractices_v81/Procedures/generateViewsXML(ConfigParamsXML, NVL(layerType,&apos;CR&apos;), groupIds, derivedFilterPath);
	else
		-- Invoke sending results to &quot;CONSOLE WINDOW TAB&quot;
		for r as 
		    SELECT * FROM /shared/ASAssets/BestPractices_v81/Procedures/generateViewsXML(ConfigParamsXML, NVL(layerType,&apos;CR&apos;), groupIds, derivedFilterPath) 
		do
			set i = i + 1;
		end for;
	end if; 
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1570164291271</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">na</attribute>
  <attribute name="lastModifiedUserName" type="STRING">asp5665</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>